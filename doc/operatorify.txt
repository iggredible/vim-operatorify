*operatorify.txt*  Turn Vim functions into operators easily. So OP.
*operatorify*

Author:  Igor Irianto <https://irian.to>
License: The same as Vim's |license|.

                                                       *operatorify-intro*
Operatorify can turn normal functions into Vim operators easily.
You can also manage multiple operators through a popup list.

==============================================================================
CONTENTS                                               *operatorify-contents*

    1. Usage .......................... |operatorify-usage|
    2. Functions ...................... |operatorify-functions|
    3. Configuration .................. |operatorify-config|
    4. Examples ...................... |operatorify-examples|

==============================================================================
1. Usage                                                *operatorify-usage*

Operatorify turns functions that accept a string as their first argument into 
Vim operators. These operators can then be used with motions, in visual mode, 
and support the dot command.

Note: the function must accept a string as its first argument.

Example function: >
    function! MyFunction(text= '')
        echo "I am doing something: " .. a:text
    endfunction
<

==============================================================================
2. Functions                                           *operatorify-functions*

                                                      *Operatorify#Wrapper()*
Operatorify#Wrapper({funcname}[, {context}[, {type}]])
    Turns a function into an operator. The function specified by {funcname} 
    MUST accept a string as its first argument.

    Example: >
        nnoremap <expr> <Plug>MyFunction Operatorify#Wrapper('MyFunction')
        xnoremap <expr> <Plug>MyFunction Operatorify#Wrapper('MyFunction')
        nnoremap <expr> <Plug>MyFunctionLine Operatorify#Wrapper('MyFunction') .. '_'
<
                                                      *Operatorify#Mapper()*
Operatorify#Mapper({key}, {funcname}[, {wrapper}])
    Quickly create operator mappings. It follows the convention where the 
    line operation is triggered by repeating the last character of the key.

    Arguments:
        {key}       The key sequence for the operator
        {funcname}  Name of the function to be turned into an operator
        {wrapper}   Optional. The wrapper function name (default: 'Operatorify#Wrapper')

    Example: >
        call Operatorify#Mapper('go', 'MyFunction')
<
    This creates the following mappings:
        go   -> operator (works with motions)
        goo  -> operate on current line
        go   -> operate on visual selection (in visual mode)

    Note: you don't have to pass it a 2-character key. A 1-character key
works.

                                                      *Operatorify#Lister()*
Operatorify#Lister([{text}])
    Creates a popup menu from a list of functions defined in |g:operatorify_list|.
    When an item is selected, the corresponding function is called with the 
    {text} argument.

    Default mapping: gl (disable it with |g:operatorify_no_mappings|)

==============================================================================
3. Configuration                                       *operatorify-config*

                                                      *g:operatorify_list*
g:operatorify_list
    List of function names to be displayed in the popup menu created by 
    |Operatorify#Lister()|.
    Default: [] >
        let g:operatorify_list = ['MyFunction', 'MyOtherfunction', 'MoreFunc']
<
                                                      *g:operatorify_options*
g:operatorify_options
    Dictionary of options for the popup menu. See |popup_menu-arguments| for 
    available options.
    Default: >
        let g:operatorify_options = {
            \ 'callback': 'PopupCallback',
            \ 'border': [],
            \ 'padding': [0,1,0,1],
            \ 'pos': 'topleft',
            \ 'moved': [0, 0, 0],
            \ 'scrollbar': 0,
            \ 'fixed': 1
            \ }
<
                                                      *g:operatorify_no_mappings*
g:operatorify_no_mappings
    If this is set to true, the default mappings `gl` will not be created.
    Default: undefined

==============================================================================
4. Examples                                           *operatorify-examples*

Basic example: >
    " Define a function
    function! ToUpper(text)
        return toupper(a:text)
    endfunction

    " Create mappings manually
    nnoremap <expr> <Plug>ToUpper Operatorify#Wrapper('ToUpper')
    xnoremap <expr> <Plug>ToUpper Operatorify#Wrapper('ToUpper')
    nnoremap <expr> <Plug>ToUpperLine Operatorify#Wrapper('ToUpper') .. '_'

    " Map to keys
    nmap go  <Plug>ToUpper
    xmap go  <Plug>ToUpper
    nmap goo <Plug>ToUpperLine

    " Or use the mapper helper
    call Operatorify#Mapper('go', 'ToUpper')
<

Using the lister with multiple functions: >
    " Define functions
    function! ToUpper(text)
        return toupper(a:text)
    endfunction

    function! ToLower(text)
        return tolower(a:text)
    endfunction

    " Set up the list
    let g:operatorify_list = ['ToUpper', 'ToLower']

    " Use the default gl mapping or map it to your preferred key
    nnoremap <leader>o :call Operatorify#Lister()<CR>
<

 vim:tw=78:ts=8:ft=help:norl:
